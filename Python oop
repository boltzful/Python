class Student:
    def __init__(self, name, marks):
        self.name = name
        self.marks = marks

    def is_passed(self):
        average_marks = sum(self.marks) / len(self.marks)
        return average_marks > 50

# Tworzenie dwóch przykładowych obiektów klasy Student
student1 = Student("Jan Kowalski", [60, 70, 80])  # Średnia > 50
student2 = Student("Anna Nowak", [40, 30, 20])    # Średnia <= 50

# Sprawdzenie czy studenci zaliczyli
print(student1.is_passed())  # Powinno zwrócić True
print(student2.is_passed())  # Powinno zwrócić False



class Library:
    def __init__(self, city, street, zip_code, open_hours, phone):
        self.city = city
        self.street = street
        self.zip_code = zip_code
        self.open_hours = open_hours
        self.phone = phone

    def __str__(self):
        return f"Library: {self.city}, {self.street}, {self.zip_code}\nOpen hours: {self.open_hours}\nPhone: {self.phone}"


class Employee:
    def __init__(self, first_name, last_name, hire_date, birth_date, city, street, zip_code):
        self.first_name = first_name
        self.last_name = last_name
        self.hire_date = hire_date
        self.birth_date = birth_date
        self.city = city
        self.street = street
        self.zip_code = zip_code

    def __str__(self):
        return f"Employee: {self.first_name} {self.last_name}\nHire date: {self.hire_date}\nBirth date: {self.birth_date}\nLocation: {self.city}, {self.street}, {self.zip_code}"


class Book:
    def __init__(self, library, publication_date, author_name, author_surname, number_of_pages):
        self.library = library
        self.publication_date = publication_date
        self.author_name = author_name
        self.author_surname = author_surname
        self.number_of_pages = number_of_pages

    def __str__(self):
        return f"Book: {self.author_name} {self.author_surname}\nPublished: {self.publication_date}\nPages: {self.number_of_pages}\nLibrary: {self.library}"


class Order:
    def __init__(self, employee, student, books, order_date):
        self.employee = employee
        self.student = student
        self.books = books
        self.order_date = order_date

    def __str__(self):
        book_list = "\n".join([f"  - {book}" for book in self.books])
        return f"Order by {self.employee.first_name} {self.employee.last_name} for {self.student}\nOrder Date: {self.order_date}\nBooks:\n{book_list}"


# Tworzenie instancji klasy Library
library1 = Library("New York", "Broadway", "10001", "9am - 5pm", "123-456-7890")
library2 = Library("London", "Main Street", "SW1A 1AA", "10am - 6pm", "987-654-3210")

# Tworzenie instancji klasy Book
book1 = Book(library1, "2022-01-01", "John", "Doe", 200)
book2 = Book(library1, "2022-02-01", "Jane", "Doe", 250)
book3 = Book(library2, "2022-03-01", "Michael", "Smith", 180)
book4 = Book(library2, "2022-04-01", "Emily", "Johnson", 220)
book5 = Book(library2, "2022-05-01", "David", "Williams", 300)

# Tworzenie instancji klasy Employee
employee1 = Employee("Alice", "Smith", "2020-01-01", "1990-05-15", "New York", "Broadway", "10001")
employee2 = Employee("Bob", "Johnson", "2019-01-01", "1985-10-20", "London", "Main Street", "SW1A 1AA")
employee3 = Employee("Charlie", "Brown", "2021-01-01", "1995-03-25", "Paris", "Rue de Rivoli", "75001")

# Tworzenie instancji klasy Order
order1 = Order(employee1, "John Doe", [book1, book2], "2024-02-27")
order2 = Order(employee2, "Jane Doe", [book3, book4, book5], "2024-02-27")

# Wyświetlanie zamówień
print(order1)
print()
print(order2)



class Property:
    def __init__(self, area, rooms, price, address):
        self.area = area
        self.rooms = rooms
        self.price = price
        self.address = address

    def __str__(self):
        return f"Area: {self.area} sq. meters\nRooms: {self.rooms}\nPrice: {self.price} USD\nAddress: {self.address}"


class House(Property):
    def __init__(self, area, rooms, price, address, plot):
        super().__init__(area, rooms, price, address)
        self.plot = plot

    def __str__(self):
        return f"House\n{super().__str__()}\nPlot: {self.plot} sq. meters"


class Flat(Property):
    def __init__(self, area, rooms, price, address, floor):
        super().__init__(area, rooms, price, address)
        self.floor = floor

    def __str__(self):
        return f"Flat\n{super().__str__()}\nFloor: {self.floor}"


# Tworzenie obiektu klasy House
house = House(200, 5, 300000, "123 Main St", 500)

# Tworzenie obiektu klasy Flat
flat = Flat(100, 3, 150000, "456 Elm St", 2)

# Wyświetlanie obiektów
print(house)
print()
print(flat)




